import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class SimulatedTest {
    public static void main(String[] args)
    {
        Scanner sc= new Scanner(System.in);
        int source = 0;
        int choice = 0;
        System.out.println("Enter the number of Vertices you want");
        int N = sc.nextInt();
		/*To execute connectedComponents , isCycle and shortestPath for a N nodes,given by user
		and also testing these functions for three types of graphs generated by n_cycle,equivalence_cycle and complete_cycle*/
        do{
            if(N <= 0){
                //getting vertices from user
                System.out.println("Please enter a valid number of Vertices");
                break;}
            //getting the type of graph from user
            System.out.println("Enter the type of graph you want");
            System.out.println("1. N_Cycle Graph");
            System.out.println("2. Complete_Graph");
            System.out.println("3. Equivalence_Mod_K Graph");
            choice = sc.nextInt();
            //Executing and printing Shortest Path , Connected graph and onecycle funtions output for n_cycle
            if(choice == 1){
                List<Edge> edges = GraphSimulator.n_cycle(N);
                Graph graph = new Graph(edges, N);
                System.out.println("Following are the Shortest path from Vertex 0:");
                GraphOperations.shortest_paths(graph, source, N);
                System.out.println("Following are the Connected Graph Components:");
                GraphOperations.connected_components(graph,N);
                System.out.println("Graph Display:");
                GraphOperations.printGraph(graph, N);
                System.out.println("Following are one cycle details:");
                System.out.println(GraphOperations.one_cycle(graph, N));
            }
            //Executing and printing Shortest Path , Connected graph and onecycle funtions output for Complete_Graph
            if(choice == 2){
                List<Edge> edges = GraphSimulator.complete_cycle(N);
                Graph graph = new Graph(edges, N);
                System.out.println("Following are the Shortest path from Vertex 0:");
                GraphOperations.shortest_paths(graph, source, N);
                System.out.println("Following are the Connected Graph Components:");
                GraphOperations.connected_components(graph,N);
                //System.out.println("Graph Display:");
                //GraphOperations.printGraph(graph, N);
                System.out.println("Following are one cycle details:");
                System.out.println(GraphOperations.one_cycle(graph, N));
            }
            //Executing and printing Shortest Path , Connected graph and onecycle funtions output for equivalence_cycle
            if(choice == 3){
                Random rand = new Random();
                int K = rand.nextInt(N);
                System.out.println("Value of K:"+ K);
                List<Edge> edges = GraphSimulator.equivalence_cycle(N, K);
                Graph graph = new Graph(edges, N);
                System.out.println("Following are the Shortest path from Vertex 0:");
                GraphOperations.shortest_paths(graph, source, N);
                System.out.println("Following are the Connected Graph Components:");
                GraphOperations.connected_components(graph,N);
                System.out.println("Graph Display:");
                GraphOperations.printGraph(graph, N);
                System.out.println("Following are one cycle details:");
                System.out.println(GraphOperations.one_cycle(graph, N));
            }
            System.out.println("******");
        }while(choice > 0 && choice < 4);
        System.out.println("Program exited...");
    }
}
